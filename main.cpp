#include <Arduino.h>
#include <U8g2lib.h>
#include <SPI.h>
#include <Wire.h>
#include <OLED.h>
 #include <ESP8266WiFi.h>
 #include <PubSubClient.h>

 char* ssid     = "ivanlab";
 char* password = "ComputoErgoSum";

U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2 (U8G2_R0, U8X8_PIN_NONE,21, 22);

#define neliumVF_width 128
#define neliumVF_height 64
static const unsigned char neliumVF_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x4F, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0xFF, 0xE0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xC0, 0x3F, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x1F, 0xF8, 0x07,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xF0, 0x07, 0xFC, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xF8, 0x03, 0xFC, 0x1F, 0x00, 0xF0, 0xC1, 0xE3,
  0x3F, 0x00, 0x78, 0x00, 0xC0, 0xFF, 0x03, 0x00, 0xFC, 0x03, 0xFC, 0x3F,
  0x00, 0xF0, 0xC1, 0xE3, 0xFF, 0x00, 0x78, 0x00, 0xC0, 0xFF, 0x03, 0x00,
  0xFC, 0x01, 0xF8, 0x3F, 0x00, 0xF0, 0xC3, 0xE3, 0xFF, 0x00, 0x78, 0x00,
  0xC0, 0xFF, 0x03, 0x00, 0xFE, 0x00, 0xE0, 0x7F, 0x00, 0xF0, 0xC3, 0xE3,
  0xE1, 0x01, 0x78, 0x00, 0x00, 0x3C, 0x00, 0x00, 0xFE, 0x00, 0xC0, 0x7F,
  0x00, 0xF0, 0xC7, 0xE3, 0xE1, 0x01, 0x78, 0x00, 0x00, 0x3C, 0x00, 0x00,
  0xFE, 0x00, 0x80, 0x7F, 0x00, 0xF0, 0xCF, 0xE3, 0xE1, 0x01, 0x78, 0xC0,
  0x03, 0x3C, 0x00, 0x00, 0x7F, 0x00, 0x00, 0xFF, 0x00, 0xF0, 0xCE, 0xE3,
  0xF1, 0x00, 0x78, 0xF0, 0x0F, 0x3C, 0x00, 0x00, 0x7F, 0x00, 0x00, 0xFF,
  0x00, 0xF0, 0xCE, 0xE3, 0x7F, 0x00, 0x78, 0xF8, 0x1F, 0x3C, 0x00, 0x00,
  0x7F, 0x00, 0x00, 0xFE, 0x00, 0xF0, 0xDC, 0xE3, 0x7F, 0x00, 0x78, 0x78,
  0x1E, 0x3C, 0x00, 0x00, 0x7F, 0x00, 0x00, 0xFE, 0x00, 0xF0, 0xDC, 0xE3,
  0xFF, 0xF1, 0x7B, 0x3C, 0x3C, 0x3C, 0x00, 0x00, 0x7F, 0x00, 0x00, 0xFE,
  0x00, 0xF0, 0xFC, 0xE3, 0xE1, 0xF1, 0x7B, 0x3C, 0x3C, 0x3C, 0x00, 0x00,
  0x7F, 0x00, 0x00, 0xFE, 0x00, 0xF0, 0xF8, 0xE3, 0xC1, 0xF3, 0x7B, 0x3C,
  0x3C, 0x3C, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFE, 0x00, 0xF0, 0xF8, 0xE3,
  0xC1, 0x03, 0x78, 0x3C, 0x3C, 0x3C, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
  0x00, 0xF0, 0xF0, 0xE3, 0xE1, 0x03, 0x78, 0x78, 0x1E, 0x3C, 0x00, 0x00,
  0xFE, 0x01, 0x00, 0x7F, 0x00, 0xF0, 0xF0, 0xE3, 0xFF, 0x01, 0x78, 0xF8,
  0x1F, 0x3C, 0x00, 0x00, 0xFE, 0x01, 0x80, 0x7F, 0x00, 0xF0, 0xE0, 0xE3,
  0xFF, 0x00, 0x78, 0xF0, 0x0F, 0x3C, 0x00, 0x00, 0xFE, 0x03, 0xC0, 0x7F,
  0x00, 0xF0, 0xE0, 0xE3, 0x3F, 0x00, 0x78, 0xC0, 0x03, 0x3C, 0x00, 0x00,
  0xFC, 0x07, 0xE0, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFC, 0x1F, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0x1F,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xF0, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x0F, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xE0, 0xC1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xE3, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xE3, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xF0, 0xE1, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE1, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x1E,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x1F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x1F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x3F,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x3F,
  0xE0, 0xFF, 0x70, 0x70, 0x3C, 0xC0, 0xE1, 0x7F, 0x3F, 0x60, 0x00, 0x00,
  0x00, 0x00, 0xFE, 0x7F, 0xF8, 0xFF, 0x71, 0x70, 0x3C, 0xC0, 0xE1, 0xFF,
  0x7F, 0xF0, 0xE1, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x78, 0xC0, 0x73, 0x70,
  0x3C, 0xC0, 0xE1, 0xFF, 0xFF, 0xF8, 0xF1, 0x01, 0x00, 0x00, 0x0E, 0xF0,
  0x38, 0x80, 0x73, 0x70, 0x3C, 0xC0, 0xE1, 0xE0, 0xE1, 0xF8, 0xF1, 0x01,
  0x00, 0x00, 0x0E, 0xE0, 0x38, 0xC0, 0x73, 0x70, 0x3C, 0xC0, 0xE1, 0xE0,
  0xE1, 0xF0, 0xF1, 0x01, 0x00, 0x00, 0x0E, 0xE0, 0xB8, 0xFF, 0x71, 0x70,
  0x3C, 0xC0, 0xE1, 0xE0, 0xE1, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x0E, 0xE0,
  0xB8, 0xFF, 0x71, 0x70, 0x3C, 0xC0, 0xE1, 0xE0, 0xE1, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0E, 0xE0, 0xB8, 0xFF, 0x70, 0x70, 0x3C, 0xC0, 0xE1, 0xE0,
  0xE1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xE0, 0x38, 0x00, 0x70, 0x70,
  0x38, 0xC0, 0xE1, 0xE0, 0xE1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xE0,
  0x38, 0x00, 0xF0, 0x70, 0x78, 0xC0, 0xE1, 0xE0, 0xE1, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0E, 0xE0, 0xF8, 0x1F, 0xE0, 0x73, 0xF8, 0xFF, 0xE1, 0xE0,
  0xE1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xE0, 0xF0, 0x1F, 0xE0, 0x73,
  0xE0, 0xFF, 0xE1, 0xE0, 0xE1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xE0,
  0xC0, 0x1F, 0x80, 0x73, 0x80, 0xFF, 0xE0, 0xE0, 0xE1, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x3F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, };


#define TS_width 128
#define TS_height 57
static const unsigned char TS_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
  0x03, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xF0, 0x07, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
  0x0F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0x07, 0x00, 0x80, 0x7F, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0x00, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x80, 0x7F, 0x00, 0x00, 0xF8,
  0x0F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x80,
  0x7F, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0x07, 0x00, 0x80, 0x7F, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0x00, 0x00,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x80, 0x7F, 0x00, 0x00, 0xF8,
  0x0F, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x80,
  0x7F, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0xF8, 0x0F, 0x00, 0x80, 0xFF, 0x01,
  0xF8, 0x07, 0x00, 0x00, 0x7F, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0xFC, 0x1F,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
  0x0F, 0x00, 0xFE, 0x1F, 0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00,
  0x14, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0xFF, 0x0F, 0x00, 0x80, 0xFF, 0x01,
  0xF8, 0x07, 0x00, 0x00, 0x2B, 0x00, 0x00, 0xF8, 0x0F, 0x80, 0xFF, 0x07,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0xF7, 0xFF, 0x1F, 0x2A, 0x00, 0x00, 0xF8,
  0x0F, 0xC0, 0xFF, 0x03, 0x00, 0x80, 0xFF, 0x01, 0xF8, 0xFF, 0xFF, 0x3F,
  0x36, 0xFF, 0xFF, 0xFB, 0x0F, 0xE0, 0xFF, 0x03, 0x00, 0x80, 0xFF, 0x01,
  0xF8, 0xFF, 0xFF, 0x3F, 0x09, 0xFF, 0xFF, 0xFF, 0x0F, 0xF0, 0xFF, 0x01,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0xFF, 0xFF, 0x3F, 0x3B, 0xFF, 0xFF, 0xFF,
  0x0F, 0xF8, 0xFF, 0x00, 0x00, 0x80, 0xFF, 0x01, 0xF8, 0xFF, 0xFF, 0x3F,
  0x22, 0xFF, 0xFF, 0xFF, 0x0F, 0xFC, 0x7F, 0x00, 0x00, 0x80, 0xFF, 0x01,
  0xF8, 0xFF, 0xFF, 0x3F, 0x5F, 0xFF, 0xFF, 0xFF, 0x0F, 0xFE, 0x3F, 0x00,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0xFF, 0xFF, 0x3F, 0x14, 0xFF, 0xFF, 0xFF,
  0x0F, 0xFF, 0x1F, 0x00, 0x00, 0x80, 0xFF, 0x01, 0xF8, 0xFF, 0xFF, 0x3F,
  0x35, 0xFF, 0xFF, 0xFF, 0x8F, 0xFF, 0x0F, 0x00, 0x00, 0x80, 0xFF, 0x01,
  0xF8, 0xFF, 0xFF, 0x1F, 0x25, 0xFF, 0xFF, 0xFF, 0xCF, 0xFF, 0x07, 0x00,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0x3F, 0x00, 0x00, 0x2D, 0x02, 0xC0, 0xFF,
  0xEF, 0xFF, 0x03, 0x00, 0x00, 0x80, 0xFF, 0x01, 0xF8, 0x1F, 0x00, 0x00,
  0x2A, 0x00, 0x00, 0xFE, 0xEF, 0xFF, 0x01, 0x00, 0x00, 0x80, 0xFF, 0x01,
  0xF8, 0x0F, 0x00, 0x00, 0x2B, 0x00, 0x00, 0xFC, 0xEF, 0xFF, 0x00, 0x00,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0x0F, 0x00, 0x00, 0x36, 0x00, 0x00, 0xFC,
  0xEF, 0x7F, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00,
  0x25, 0x00, 0x00, 0xF8, 0xEF, 0x3F, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x01,
  0xF8, 0x07, 0x00, 0x00, 0x1A, 0x00, 0x00, 0xF8, 0xEF, 0x3F, 0x00, 0x00,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00, 0x6D, 0x00, 0x00, 0xF8,
  0xEF, 0x3F, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00,
  0x15, 0x00, 0x00, 0xF8, 0xEF, 0x7F, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x01,
  0xF8, 0x07, 0x00, 0x00, 0x2A, 0x00, 0x00, 0xF8, 0xEF, 0xFF, 0x00, 0x00,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00, 0x35, 0x00, 0x00, 0xF8,
  0xEF, 0xFF, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00,
  0x2B, 0x00, 0x00, 0xF8, 0xCF, 0xFF, 0x01, 0x00, 0x00, 0x80, 0xFF, 0x01,
  0xF8, 0x07, 0x00, 0x00, 0x2C, 0x00, 0x00, 0xF8, 0x8F, 0xFF, 0x03, 0x00,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00, 0x29, 0x00, 0x00, 0xF8,
  0x8F, 0xFF, 0x07, 0x00, 0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00,
  0x37, 0x00, 0x00, 0xF8, 0x0F, 0xFF, 0x07, 0x00, 0x00, 0x80, 0xFF, 0x01,
  0xF8, 0x07, 0x00, 0x00, 0x14, 0x00, 0x00, 0xF8, 0x0F, 0xFE, 0x0F, 0x00,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00, 0x35, 0x00, 0x00, 0xF8,
  0x0F, 0xFC, 0x1F, 0x00, 0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00,
  0x2B, 0x00, 0x00, 0xF8, 0x0F, 0xFC, 0x1F, 0x00, 0x00, 0x80, 0xFF, 0x01,
  0xF8, 0x07, 0x00, 0x00, 0x5A, 0x00, 0x00, 0xF8, 0x0F, 0xF8, 0x3F, 0x00,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00, 0x25, 0x00, 0x00, 0xF8,
  0x0F, 0xF0, 0x7F, 0x00, 0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00,
  0x2D, 0x00, 0x00, 0xF8, 0x0F, 0xF0, 0x7F, 0x00, 0x00, 0x80, 0xFF, 0x01,
  0xF8, 0x07, 0x00, 0x00, 0x29, 0x00, 0x00, 0xF8, 0x0F, 0xE0, 0xFF, 0x00,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00, 0x56, 0x00, 0x00, 0xF8,
  0x0F, 0xC0, 0xFF, 0x01, 0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00,
  0x1A, 0x00, 0x00, 0xF8, 0x0F, 0xC0, 0xFF, 0x03, 0x00, 0x80, 0xFF, 0x01,
  0xF8, 0x07, 0x00, 0x00, 0x33, 0x00, 0x00, 0xF8, 0x0F, 0x80, 0xFF, 0x03,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00, 0x16, 0x00, 0x00, 0xF8,
  0x0F, 0x00, 0xFF, 0x07, 0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00,
  0x35, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0xFE, 0x0F, 0x00, 0x80, 0xFF, 0x01,
  0xF8, 0x07, 0x00, 0x00, 0x2A, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0xFE, 0x0F,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00, 0x5A, 0x00, 0x00, 0xF8,
  0x0F, 0x00, 0xFC, 0x1F, 0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00,
  0x11, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0xF8, 0x3F, 0x00, 0x80, 0xFF, 0x01,
  0xF8, 0x07, 0x00, 0x00, 0x2F, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0xF8, 0x3F,
  0x00, 0x80, 0xFF, 0x01, 0xF8, 0x07, 0x00, 0x00, 0x32, 0x00, 0x00, 0xF8,
  0x0F, 0x00, 0xF0, 0x7F, 0x00, 0x00, 0xFF, 0x00, 0xF8, 0x07, 0x00, 0x00,
  0x2E, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0xE0, 0x7F, 0x00, 0x00, 0x7E, 0x00,
  0xF0, 0x03, 0x00, 0x00, 0x08, 0x00, 0x00, 0xF0, 0x07, 0x00, 0xC0, 0x7F,
  };


  // defines pins numbers
  const int trigPin = 4;
  const int echoPin = 5;
  const int enable = 2;

  IPAddress server(192,168,0,17);


  // defines variables
  unsigned long duration;
  int distance;
  int volume;

  WiFiClient espClient;

  void callback(char* topic, byte* payload, unsigned int length) {
    //msg received
  }

  PubSubClient client(server, 1883, callback, espClient);

  //NTPClient timeClient(ntpUDP, "pool.ntp.org", 0, 60000);


void setup(void) {

  pinMode(enable, OUTPUT);
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  digitalWrite(enable, HIGH); //activa el rele para los ultrasonidos y la pantalla OLED

  Serial.begin(9600);

  u8g2.begin();
  u8g2.setFont(u8g2_font_logisoso16_tf);

  u8g2.clearBuffer();
  u8g2.drawXBMP( 0, 0, neliumVF_width, neliumVF_height, neliumVF_bits);
  u8g2.sendBuffer();

  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin("finvanlab","ComputoErgoSum");

   while (WiFi.status() != WL_CONNECTED) {
       delay(500);
       Serial.print(".");
   }

   Serial.println();
   Serial.println("WiFi connected");
   Serial.println("IP address: ");
   Serial.println(WiFi.localIP());

char ipp[16];
String ipCharString;
  ipCharString = String(WiFi.localIP()[0]);
  ipCharString+=".";
  ipCharString+= String(WiFi.localIP()[1]);
  ipCharString+=".";
  ipCharString+= String(WiFi.localIP()[2]);
  ipCharString+=".";
  ipCharString+= String(WiFi.localIP()[3]);
 ipCharString.toCharArray(ipp, 16);

Serial.print("IP en Char =");
Serial.println(ipp);

   Serial.println();

   while (!client.connected()) {
    Serial.println("Connecting to MQTT...");

     if (client.connect("TrashBinSensor1")) {
         client.publish("ivanlab/trashbin/1/C","TrashBin connected");
         Serial.println("connected MQTT");
       } else {
         Serial.print("failed with state ");
         Serial.print(client.state());
         delay(2000);
       }

   }

   u8g2.clearBuffer();
   u8g2.drawXBMP( 0, 10, TS_width, TS_height, TS_bits);
   u8g2.sendBuffer();

  delay(3000);



   u8g2.clearBuffer();
   u8g2.setFont(u8g2_font_t0_11_tr);
   u8g2.drawStr(0,8,"TrashBin-1 Online");
   u8g2.drawStr(0,20,"WiFi connected");
   int x = u8g2.drawStr(0,30,"IP: ");
   u8g2.drawStr(x,30,ipp);
   u8g2.drawStr(0,40,"MQTT ivanlab.org UP");
   u8g2.sendBuffer();
   delay(3000);
}


void loop(void) {
  int i = 0;
  int average =0;

while (i <10) {
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);

  // Calculating the distance
  distance= duration*0.034/2;
  volume = -1*distance + 110;
  if (volume>100) volume = 100;
  if (volume<0) volume = 0;
  average+=volume;

  // Prints the distance on the Serial Monitor

  Serial.print("Duration="); Serial.println(duration);
  Serial.print("Distance: "); Serial.println(distance);
  Serial.print("Volume="); Serial.print(volume);Serial.println(" %");
  Serial.println();

  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_t0_11_tr);
  u8g2.drawStr(0,8,"TRASHBIN VOLUME USED:");
  u8g2.setFont(u8g2_font_ncenB14_tr);
  u8g2.setCursor(43, 45);
  u8g2.print(volume);
  u8g2.sendBuffer();

  delay(990);
  i++;
}

average=average/10;
Serial.print("Media de ");Serial.print(i);Serial.print(" iteraciones: ");Serial.println(average);

String json = "{\"trashbin\":\"1\",\"volume\":\""+ String(average) +"\"}";

char jsonChar[31];
json.toCharArray(jsonChar, 31);

Serial.println(jsonChar);

client.publish("ivanlab/trashbin/1/S", jsonChar);

  // wakeup after 10 seconds
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_t0_11_tr);

  int x = u8g2.drawStr(0,8,"Reported Average: ");
  u8g2.setCursor(x,8);
  u8g2.print(average);
  u8g2.setCursor(0, 32);
  u8g2.print("Going to sleep now...");
  u8g2.sendBuffer();
  delay(5000);




}
